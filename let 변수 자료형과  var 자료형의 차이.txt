자바스크립트에서 var와 let의 차이점
var와 let는 모두 자바스크립트에서 변수를 선언하는 데 사용되는 키워드이지만, 범위(scope), 재선언(redeclaration), 호이스팅(hoisting) 측면에서 차이점을 가지고 있습니다.

1. 범위 (Scope):

var: 함수 스코프(Function Scope)를 따릅니다. 즉, 선언된 함수 블록 내에서만 유효하며, 해당 블록 외부에서는 접근할 수 없습니다. 하지만, 함수 블록 내에서 선언된 var 변수는 같은 이름의 다른 var 변수를 재선언할 수 있습니다.
let: 블록 스코프(Block Scope)를 따릅니다. 즉, 선언된 블록 내에서만 유효하며, 해당 블록 외부에서는 접근할 수 없습니다. 또한, 같은 블록 내에서 같은 이름의 let 변수를 재선언할 수 없습니다.
예시:

JavaScript
function func() {
  var var1 = 10; // 함수 스코프 (var)
  let let1 = 20; // 블록 스코프 (let)

  console.log(var1); // 10 출력
  console.log(let1); // 20 출력

  var1 = 30; // 같은 이름의 var 변수 재선언 가능
  let1 = 40; // 같은 이름의 let 변수 재선언 불가능 (에러 발생)

  console.log(var1); // 30 출력
  // console.log(let1); // 에러 발생
}

func();

console.log(var1); // ReferenceError: var1 is not defined
console.log(let1); // ReferenceError: let1 is not defined
코드를 사용할 때는 주의가 필요합니다.
content_copy
2. 재선언 (Redeclaration):

var: 동일한 함수 스코프 내에서 같은 이름의 var 변수를 재선언할 수 있습니다.
let: 동일한 블록 스코프 내에서 같은 이름의 let 변수를 재선언할 수 없습니다.
예시:

JavaScript
function func() {
  var var1 = 10;
  var var1 = 20; // 동일한 함수 스코프에서 var 재선언 가능

  console.log(var1); // 20 출력
}

func();
코드를 사용할 때는 주의가 필요합니다.
content_copy
3. 호이스팅 (Hoisting):

var: 선언되기 전에도 변수 선언이 맨 위로 끌어올려지는 (hoisting) 현상이 발생합니다. 즉, 선언 위치와 상관없이 변수를 사용할 수 있지만, 값은 초기화되지 않아 undefined 값을 반환합니다.
let: 호이스팅이 일어나지 않습니다. 선언된 블록 범위 내에서만 변수를 사용할 수 있으며, 선언 위치 이전에 사용하면 ReferenceError를 발생시킵니다.
예시:

JavaScript
function func() {
  console.log(var1); // undefined 출력 (var 호이스팅)
  var var1 = 10;

  console.log(let1); // ReferenceError: let1 is not defined (let 호이스팅 없음)
  let let1 = 20;
}

func();
코드를 사용할 때는 주의가 필요합니다.
content_copy
결론:

var는 함수 스코프를 따르고, 재선언이 가능하며, 호이스팅이 발생합니다.
let은 블록 스코프를 따르고, 재선언이 불가능하며, 호이스팅이 발생하지 않습니다.
추가적으로, 최신 웹 개발에서는 let을 사용하는 것이 권장됩니다. 이는 let이 더욱 명확하고 안전한 코드 작성을 가능하게 하기 때문입니다.

참고:

MDN var [유효하지 않은 URL 삭제됨]
MDN let [유효하지 않은 URL 삭제됨]